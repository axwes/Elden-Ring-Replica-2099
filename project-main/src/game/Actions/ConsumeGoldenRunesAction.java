package game.Actions;
import edu.monash.fit2099.engine.actions.Action;
import edu.monash.fit2099.engine.actors.Actor;
import edu.monash.fit2099.engine.items.Item;
import edu.monash.fit2099.engine.positions.GameMap;
import game.Managers.RunesManager;
import game.Runes.GoldenRunes;
import game.utils.RandomNumberGenerator;

/**
 * Represents an action that allows an actor to attack all nearby enemies in a specified direction.
 * Created by:
 * @author Choo Carmen
 * Modified by:
 * @see Action
 */
public class ConsumeGoldenRunesAction extends Action {

    public ConsumeGoldenRunesAction(Item goldenRunes ){
        this.goldenRunes = goldenRunes;
    }

    public Item getGoldenRunes() {
        return goldenRunes;
    }

    public void setGoldenRunes(GoldenRunes goldenRunes) {
        this.goldenRunes = goldenRunes;
    }

    private Item goldenRunes;


    /**
     * Getter for Runes Value
     * @return value generated by golden runes
     */
    public int getRunesValue() {
        return RunesValue;
    }
    /**
     * Setter for Runes
     * @param RunesValue Item scattered around the map
     */
    public void setRunesValue(int RunesValue) {
        this.RunesValue = RunesValue;
    }
    /**
     * This item cannot be purchased but can be found scattered across the maps.
     */
    private int RunesValue;

    /**
     * Golden Runes can be generated as Runes when consumed
     * @param minRunes range of minimum Runes generated
     * @param maxRunes range of maximum Runes generated
     * @return Runes generated
     */
    private int generateRunes(int minRunes, int maxRunes) {
        int randomNumber = RandomNumberGenerator.getRandomInt(minRunes, maxRunes);
        return randomNumber;
    }

    /**
     * When executed, Golden Runes will generate Runes
     * @param actor The actor performing the action.
     * @param map The map the actor is on.
     * @return String which represents the value of runes added to player
     */
    @Override
    public String execute(Actor actor, GameMap map) {
        setRunesValue(generateRunes(200,10000));
        RunesManager.getInstance().addRunes(getRunesValue());
        actor.removeItemFromInventory(goldenRunes);
        return actor + " cosumed Golden Runes and " + getRunesValue() + " is added ";
    }

    /**
     * Describes the amount of runes added to player
     * @param actor The actor performing the action.
     * @return a description used for the menu UI
     */
    @Override
    public String menuDescription(Actor actor) {
        return "Tarnished consume Golden Runes";
    }
}
